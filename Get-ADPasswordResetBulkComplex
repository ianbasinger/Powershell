function Get-ADPasswordResetBulkComplex

{
Add-Type -AssemblyName System.Web
# Import System.Web assembly

[System.Web.Security.Membership]::GeneratePassword(11,2)
Function GenerateStrongPassword ([Parameter(Mandatory=$true)][int]$PasswordLenght)
# Generate random password with defined complex requirements
{
Add-Type -AssemblyName System.Web
$PassComplexCheck = $false
do {
$newPassword=[System.Web.Security.Membership]::GeneratePassword($PasswordLenght,1)
If ( ($newPassword -cmatch "[A-Z\p{Lu}\s]") `
-and ($newPassword -cmatch "[a-z\p{Ll}\s]") `
-and ($newPassword -match "[\d]") `
-and ($newPassword -match "[^\w]")
)
{
$PassComplexCheck=$True
}
} While ($PassComplexCheck -eq $false)
return $newPassword
}

$csvDir = Read-Host -Prompt "Please enter the directory where the .csv file is"
# User prompt to specify directory for the .csv file that has the list of users with a password reset needed. You NEED to pass the full directory and include file name or you will get Access is not enabled.

Import-Csv "$csvDir" | ForEach-Object {
#Import from .csv file

$samAccountName = $_."samAccountName"

#Un-comment the below line if your CSV file includes password for all users
#$newPassword = ConvertTo-SecureString -AsPlainText $_."Password"Â  -Force <--- ^^^ Line mentioned above

Write-Warning "Confirm the information is correct before proceeding, this is a bulk complex password reset" -WarningAction Inquire
# Warning confirmation on the change, Y/N to confirm

Set-ADAccountPassword -Identity $samAccountName -NewPassword $newPassword -Reset
# Calls on the new password listed above

Set-AdUser -Identity $samAccountName -ChangePasswordAtLogon $true
# Forces user to change password at next login.

Write-Host " AD Password has been reset for: "$samAccountName
# Writes to PS window stating the changes took affect.

            }
        }
