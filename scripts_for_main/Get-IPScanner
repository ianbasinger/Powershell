## Script will scan for an indicated range of IP addresses, generally a subnet in most use cases.
## If your network has other subnets, VLANs, etc. then some hosts may not echo back but could still be online, keep that in mind

$ips_start = Read-Host "Enter the starting IP address (e.g., 10.1.1.1)"
## Asks for user input to declare start of subnet to scan
$ips_end = Read-Host "Enter the ending IP address (e.g., 10.1.1.255)"
## Asks for user input to declare end of subnet to scan

$alive_ips = @()

for ($i = [int]([System.Net.IPAddress]::Parse($ips_start).GetAddressBytes()[3]); $i -le [int]([System.Net.IPAddress]::Parse($ips_end).GetAddressBytes()[3]); $i++) {
## for loop on $ips_start + $ips_end
  $reply = Test-Connection -ComputerName "$($ips_start.Split('.')[0..2] -join '.').$i" -Count 1 -Quiet
  if ($reply) {
  ## if host echoes back to the ping, then do the following:
    $alive_ips += "$("$($ips_start.Split('.')[0..2] -join '.')." + $i)"
  }
}

$hostnames = @{}
$alive_ips | % {
  $hostnames[$_] = [System.Net.Dns]::GetHostByAddress($_).HostName
  ## if we get a reply back indicating an alive host on the subnet, let's resolve the hostname using DNS
}

$alive_ips | % {
  Write-Output "$_ is alive ($($hostnames[$_]))"
  ## write the output here
}

Write-Output "Done!"
## Write to console letting us know it's finished the job
