#====================================================================Start of function====================================================================#
# Function Generates strong password within certain complexity limits, outputs to PS console
function Get-StrongPassword ([Parameter(Mandatory=$true)][int]$PasswordLength)
    {
        Add-Type -AssemblyName System.Web
        $PassComplexCheck = $false
        do {
        $newPassword=[System.Web.Security.Membership]::GeneratePassword($PasswordLength,1)
        If ( ($newPassword -cmatch "[A-Z\p{Lu}\s]") `
        -and ($newPassword -cmatch "[a-z\p{Ll}\s]") `
        -and ($newPassword -match "[\d]") `
        -and ($newPassword -match "[^\w]")
        )
        {
        $PassComplexCheck=$True
        }
        } While ($PassComplexCheck -eq $false)
        return $newPassword
    }
#====================================================================End of function====================================================================#

#2nd similar function, this one doesn't check if it meets complexity requirements but I feel is slightly better as it outputs to .txt and catches more user errors
#====================================================================Start of function====================================================================#
function GenerateNewPassword
# This will generate 1 new complex password, and export output to a .txt file we specify
    {
        try
        {
            Add-Type -AssemblyName System.Web

            $filepath = 'C:\Users\ian.basinger\Desktop\Powershell stuff\NewPasswords.txt'

            try {[System.Web.Security.Membership]::GeneratePassword(8,2)} catch{Write-Warning -Message 'Issue with .NET Framework'} try{Out-File -FilePath $filepath -Append} catch{Write-Warning -Message 'Unable to get filepath, did you specify the correct file path for the file?'}
                #.NET Framework generates the password for us, outputs to specified file path, will catch errors if issue with .NET or filepath issues.                                           

                    Write-Host('Generated new password successfully...')
        }
        
        catch {Write-Warning -Message 'Unable to generate new password, something unexpected went wrong...'}
# End of function
    }

function GenerateNewPasswords
# This is just a for loop for 10 times, to get us 10 new passwords
    {

    for ($x='10' ;$x.length -le 11;$x=$x+'x'){GenerateNewPassword}

# End of function
    }
#====================================================================End of function====================================================================#
